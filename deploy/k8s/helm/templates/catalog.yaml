kind: ConfigMap
apiVersion: v1
metadata:
  name: catalog-cm
  namespace: {{ .Values.namespace }}
  labels:
    app: eshop
    service: catalog
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  SeqServerUrl: http://seq
  PICS_FOLDER: StoreData
  DATA_FOLDER: StoreData
  LocalImageFolder: StoreData
  AIProducctGeneratorPrompt: Suggest 5 programming languages. 
                             For each, create two merchandise items that could be sold on an ecommerce website store. 
                             Each merchandise should have a short cool name, description and type like mug, shirt or hoodie. Use the description and create a prompt for each merchandise item that can be used to generate an image. The prompt should be a short sentence that describes the merchandise item. 
                             All the background for the image should be transparent. Return a valid json object called suggestions containing each suggestion with a random integer id [id], a name [name], and a list of uniquely identifiable merchandise items [merchandises] for that suggestion. 
                             Each merchandize has the service name [brand], name [name], description [description], a prompt [prompt], a type [type], a global random unique integer id [id], a decimal price [price] and an integer stock [availableStock] to each merchandise item.

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: catalog
  namespace: {{ .Values.namespace }}
  labels:
    app: eshop
    service: catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      service: catalog
  template:
    metadata:
      labels:
        app: eshop
        service: catalog
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "catalog-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      dnsConfig:
        options:
          - name: edns0
      #Add init containers and run eshopdapr/eshop.init:latest
      initContainers:
        - name: catalog-product-gen
          image: eshopdapr/catalog.aigen:latest
          imagePullPolicy: IfNotPresent
          #add env from a secret called azureopenai-secret
          envFrom:
            - secretRef:
                name: azureopenai-credentials       
            - configMapRef:
                name: catalog-cm
          volumeMounts:
            - name: storedata
              mountPath: /app/StoreData
      containers:
        - name: catalog-api
          image: eshopdapr/catalog.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              protocol: TCP
            - containerPort: 81
              protocol: 
          envFrom:
            - configMapRef:
                name: catalog-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: storedata
              mountPath: /app/StoreData
      volumes:
        - name: storedata
          persistentVolumeClaim:
            claimName: storedata
---
kind: Service
apiVersion: v1
metadata:
  name: catalog-api
  namespace: {{ .Values.namespace }}
  labels:
    app: eshop
    service: catalog
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 3500
      targetPort: 3500
      protocol: TCP
      name: dapr-http
    - port: 50001
      targetPort: 50001
      protocol: TCP
      name: dapr-grpc
  selector:
    service: catalog

---
apiVersion: storage.k8s.io/v1
kind: StorageClass 
metadata:   
  name: manual 
provisioner: docker.io/hostpath
--- 
#
apiVersion: v1
kind: PersistentVolume
metadata:
  name: storedata
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 256Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /Users/jmasengesho/Documents/workspace/eshop/eShopOnDapr/misc/k8s
  persistentVolumeReclaimPolicy: Retain
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: storedata
  namespace: {{ .Values.namespace }}
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 256Mi
